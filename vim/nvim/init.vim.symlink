-call plug#begin('~/.config/nvim/plugged')

" Navigation
Plug 'ctrlpvim/ctrlp.vim'

" UI
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'nicknikolov/dark-matter.vim'
Plug 'tpope/vim-fugitive'

" Writing code
"" Javascript
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
Plug 'carlitux/deoplete-ternjs'
Plug 'elzr/vim-json'
"" Rust
Plug 'rust-lang/rust.vim'
"" HTML / CSS
Plug 'othree/html5.vim'

"" Markdown
Plug 'suan/vim-instant-markdown', { 'for': 'markdown' }

" Snippets and completion
function! DoRemote(arg)
  UpdateRemotePlugins
endfunction
Plug 'Shougo/deoplete.nvim', { 'do': function('DoRemote') }
Plug 'SirVer/ultisnips'

" Utilities
Plug 'tpope/vim-surround'
Plug 'guns/xterm-color-table.vim'
Plug 'tpope/vim-commentary'
Plug 'pbrisbin/vim-mkdir'
Plug 'alvan/vim-closetag'
Plug 'git-time-metric/gtm-vim-plugin'

call plug#end()
" -----------------------------------------------------------------------------

filetype off                  " required!

" Theme
color dark_matter
set background=dark
syntax on

" Vim defaults
set nonumber                  " Don't show line numbers
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab                 " In insert mode, expand tab to spaces
set showcmd                   " Show (partial) command in the last line of the screen
set showmatch                 " When a bracket is inserted, briefly jump to the matching one
set smartindent
set lazyredraw                " redraw only when we need to.

set visualbell                " don't beep
set noerrorbells              " don't beep

" Soft-wrap with no implicit linebreaks
set wrap
set linebreak
set nolist                    " list disables linebrea
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" Folds
set foldmethod=indent         " Fold based on indent
set foldnestmax=3             " Deepest fold is 3 levels
set nofoldenable              " Don't fold by default

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Display extra whitespace
set list listchars=tab:»·,trail:·,nbsp:·

" Airline options
set laststatus=2

" Deoplete
let g:deoplete#enable_refresh_always = 1
let g:deoplete#enable_at_startup = 1
let g:tern_request_timeout = 1
let g:tern_show_signature_in_pum = 0

" Keep the cursor in the same place when switching buffers
set nostartofline

" Movement within 'ins-completion-menu'
imap <expr><C-j>   pumvisible() ? "\<C-n>" : "\<C-j>"
imap <expr><C-k>   pumvisible() ? "\<C-p>" : "\<C-k>"

imap <silent><expr><Tab> pumvisible() ? "\<C-n>" : "\<C-h>"

" Disable info window
autocmd BufEnter * set completeopt-=preview

" Disable JSON plugin concealing
let g:vim_json_syntax_conceal = 0

" Markdown
let g:vim_markdown_folding_disabled = 1

" Spellchecking
set spelllang=en
set complete+=kspell
autocmd BufRead,BufNewFile *.md setlocal spell
autocmd BufRead,BufNewFile *.tex setlocal spell

let mapleader = "\<Space>"

" Shortucts
nnoremap <leader>w :w<CR>
nnoremap <leader><CR> :noh<CR>
nnoremap <leader>ev :e ~/.config/nvim/init.vim<cr>
nnoremap <leader>pi :PlugInstall<cr>
nnoremap <leader>so :source ~/work/dotfiles/vim/nvim/init.vim.symlink<cr>

" Close buffer
nnoremap <leader>q :bp<bar>sp<bar>bn<bar>bd<CR>

" Fastest escape ever
inoremap jk <Esc>

" Console log word under cursor
nnoremap <leader>l yiWo console.log(<esc>pa)<esc>=l

" Paste from clipboard
nnoremap <leader>v :set paste<cr>"+p :set nopaste<cr>

" Cycle buffers
:nnoremap <S-l> :bnext!<CR>
:nnoremap <S-h> :bprevious!<CR>

" Remove trailing whitespaces
nnoremap <silent> <Leader><BS> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let@/=_s<Bar>:nohl<CR>:w<CR>

" When copying and pasting - move to end of selection
vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]

" Jump to last cursor position unless it's invalid or in an event handler
autocmd BufReadPost *
      \ if line("'\"") > 0 && line("'\"") <= line("$") |
      " \   exe "normal g`\" zz" |
      \   exe "normal g`\" " |
      \ endif

function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        exec ':bd ' . old_name
        redraw!
    endif
endfunction
map <leader>n :call RenameFile()<cr>

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR><CR>

" CTRLP
" let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git\|\.swp'
" let g:ctrlp_working_path_mode = 0
" let g:ctrlp_working_path_mode = 'ra'

" gtm
let g:gtm_plugin_status_enabled = 1 " show gtm time working
function! AirlineInit()
  if exists('*GTMStatusline')
    call airline#parts#define_function('gtmstatus', 'GTMStatusline')
    let g:airline_section_b = airline#section#create([g:airline_section_b, ' ', '[', 'gtmstatus', ']'])
  endif
endfunction
autocmd User AirlineAfterInit call AirlineInit()
