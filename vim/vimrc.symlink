call plug#begin('~/.vim/plugged')

" Navigation
Plug 'ctrlpvim/ctrlp.vim'
Plug 'easymotion/vim-easymotion'

" UI
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'nicknikolov/dark-matter.vim'
Plug 'nathanaelkane/vim-indent-guides'

" Writing code
"" Javascript
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
Plug 'mxw/vim-jsx', { 'for': 'javascript' }
Plug 'marijnh/tern_for_vim', { 'do': 'npm install' }
Plug 'elzr/vim-json'
"" Rust
Plug 'rust-lang/rust.vim', { 'for': 'rust' }
"" HTML / CSS
Plug 'mattn/emmet-vim'
Plug 'othree/html5.vim'
"" Python
" Plug 'klen/python-mode', { 'for': 'python' }

" Writing prose
Plug 'beloglazov/vim-online-thesaurus'
"" Markdown
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown', { 'for': 'markdown' }
Plug 'suan/vim-instant-markdown', { 'for': 'markdown' }
"" Writing Layout
Plug 'junegunn/goyo.vim', { 'for': 'markdown' }
Plug 'junegunn/limelight.vim', { 'for': 'markdown' }
"" LaTeX
Plug 'lervag/vimtex'

" Snippets and completion
Plug 'Valloric/YouCompleteMe', { 'do': './install.py --tern-completer --racer-completer' }
Plug 'SirVer/ultisnips'
Plug 'ervandew/supertab'

" Utilities
Plug 'tpope/vim-surround'
Plug 'guns/xterm-color-table.vim'
Plug 'tpope/vim-commentary'

call plug#end()
" -----------------------------------------------------------------------------

filetype off                  " required!
filetype plugin indent on

syntax enable
set lazyredraw                " redraw only when we need to.

" Theme
set t_Co=256
" color gruvbox
color dark_matter
set background=dark

set relativenumber
set number
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set showcmd
set wildmenu
set showmatch
set incsearch
set hlsearch
filetype indent on
set smartindent
" let g:html_indent_inctags = "html,body,head,tbody"

set visualbell           " don't beep
set noerrorbells         " don't beep

" navigation
inoremap jk <Esc>
inoremap jj <Esc>
inoremap kk <Esc>
inoremap kj <Esc>
nnoremap J g0
nnoremap K g$
vnoremap J g0
vnoremap K g$
nnoremap B ^
nnoremap E $

" soft-wrap with no implicit linebreaks
set wrap
set linebreak
set nolist  " list disables linebrea
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" Match Error '\s\+$'
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/

" Airline options
let g:airline#extensions#tabline#enabled = 1
set laststatus=2

" You complete me
" make YCM compatible with UltiSnips (using supertab)
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

" Tern
" Disable info window
autocmd BufEnter * set completeopt-=preview

" Disable JSON plugin concealing
let g:vim_json_syntax_conceal = 0

" Python
let g:pymode = 1
let g:pymode_options = 1
let g:pymode_folding = 0

" Markdown
let g:vim_markdown_folding_disabled = 1

" Spellchecking
set spelllang=en
set complete+=kspell
autocmd BufRead,BufNewFile *.md setlocal spell
autocmd BufRead,BufNewFile *.tex setlocal spell

let mapleader = "\<Space>"

" Shortucts
nnoremap <leader>ev :e ~/.vimrc<cr>
nnoremap <leader>w :w<CR>
nnoremap <leader>n :noh<CR>
nnoremap <leader>pi :PlugInstall<cr>
nnoremap <leader>so :source ~/.vimrc<cr>
" nnoremap <leader>q :bd<cr>
nnoremap <leader>q :bp<bar>sp<bar>bn<bar>bd<CR>

nnoremap <leader>jr :TernRename<cr>
nnoremap <leader>jd :TernDef<cr>

" Console log word under cursor
nnoremap <leader>l yiWo console.log(<esc>pa)<esc>=l

" Paste from clipboard
nnoremap <leader>v :set paste<cr>"+p :set nopaste<cr>

nnoremap <c-i> i<space><esc>
nnoremap <c-o> o<esc>

" Cycle buffers
:nnoremap <S-l> :bnext!<CR>
:nnoremap <S-h> :bprevious!<CR>

" Remove trailing whitespaces
nnoremap <silent> <Leader><BS> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let@/=_s<Bar>:nohl<CR>:w<CR>

" When copying and pasting - move to end of selection
vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]

" vmap <Leader>y "+y
" vmap <Leader>d "+d
" nmap <Leader>p "+p
" nmap <Leader>P "+P
" vmap <Leader>p "+p
" vmap <Leader>P "+P

" Latex
nnoremap <leader>vlw :VimtexWordCount<cr>
let g:tex_flavor='latex'

" Limelight
let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_ctermfg = 240
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!

" Folding
set foldmethod=indent   "fold based on indent
set foldnestmax=10      "deepest fold is 10 levels
set nofoldenable        "dont fold by default

" JSX
let g:jsx_ext_required = 0

" CTRLP
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git\|\.swp'
nnoremap <leader>pp :CtrlPClearCache<CR>

" Easy motion
nmap s <Plug>(easymotion-overwin-f2)
